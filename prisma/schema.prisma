// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  slug  String @unique
  posts Post[]

  @@map("categories")
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @default("")
  image       String   @default("")
  url         String
  slug        String   @unique @default(cuid())
  content     Json[]   @default([])
  published   Boolean  @default(false)
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  medias     Media[]

  @@map("posts")
}

model Media {
  id       String @id @default(cuid())
  source   String
  width    Int
  height   Int
  mimeType String
  post     Post?  @relation(fields: [postId], references: [id])
  postId   Int?

  @@map("images")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
